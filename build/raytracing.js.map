{"version":3,"sources":["webpack://Raytracing/webpack/universalModuleDefinition","webpack://Raytracing/webpack/bootstrap","webpack://Raytracing/./src/vec/index.ts","webpack://Raytracing/./src/ray.ts","webpack://Raytracing/./src/utils/index.ts","webpack://Raytracing/./src/material/index.ts","webpack://Raytracing/./src/vec/point3.ts","webpack://Raytracing/./src/hittable/hittable.ts","webpack://Raytracing/./src/vec/color.ts","webpack://Raytracing/./src/index.ts","webpack://Raytracing/./src/material/lambertian.ts","webpack://Raytracing/external \"util\"","webpack://Raytracing/./src/material/metal.ts","webpack://Raytracing/./src/camera.ts","webpack://Raytracing/./src/hittable/hittables.ts","webpack://Raytracing/./src/hittable/index.ts","webpack://Raytracing/./src/hittable/sphere.ts","webpack://Raytracing/./src/material/dielectric.ts","webpack://Raytracing/external \"fs\"","webpack://Raytracing/./src/hittable/random.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","x","y","z","_x","_y","_z","minus","v","add","multiply","isNumber","length","Math","sqrt","lengthSquared","log","console","vec","reduce","acc","cur","Vec3","u","dot","cross","unit","random","min","max","randomInRange","randomInUnitSphere","a","PI","cos","sin","randomInHemiSphere","normal","randomInUnitDisk","origin","direction","_orig","_dir","at","Ray","degree","scatter","rIn","rec","reflected","Material","uv","etaiOverEtat","cosTheta","r_out_perp","r_out_parallel","abs","Point3","fontFace","setFaceNormal","outwardNormal","HitRecord","Hittable","Color","pixelColor","samplesPerPixel","g","b","scale","floor","clamp","fs","ASPECT_RATIO","IMG_HEIGHT","world","randomScene","lookFrom","lookAt","vup","cam","Camera","imgStr","j","pixel_color","getRay","rayColor","genColor","depth","hit","Infinity","material","scattered","attenuation","target","white","color","writeFile","err","albedo","scatterDirection","Lambertian","require","fuzzy","reflect","Metal","vfov","aspectRatio","aperture","focusDist","theta","DegreeToRadians","viewport_height","tan","viewport_width","w","horizontal","vertical","lowerLeftCorner","lensRadius","rd","offset","objects","clear","push","tMin","tMax","hitAny","closetSoFar","HittableList","default","cen","center","radius","t_min","t_max","oc","halfB","discriminant","temp","indexOfRefraction","ir","refractionRatio","unitDirection","cos_theta","reflectance","refract","cosine","refIdx","r0","pow","Dielectric","groundMaterial","Sphere","choose_mat","sphereMaterial","fuzz"],"mappings":"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","file":"raytracing.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Raytracing\"] = factory();\n\telse\n\t\troot[\"Raytracing\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","import { isNumber } from \"util\";\nimport { random, randomInRange } from \"../utils\";\n\nexport class Vec3 {\n  private _x: number = 0;\n  private _y: number = 0;\n  private _z: number = 0;\n\n  get x(): number {\n    return this._x;\n  }\n  get y(): number {\n    return this._y;\n  }\n  get z(): number {\n    return this._z;\n  }\n\n  constructor(x?: number, y?: number, z?: number);\n  constructor(x: number, y: number, z: number) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n  }\n\n  minus(v: Vec3): Vec3 {\n    if (!v) return this;\n    this._x -= v._x;\n    this._y -= v._y;\n    this._z -= v._z;\n    return this;\n  }\n\n  add(v: Vec3): Vec3 {\n    if (!v) return this;\n    this._x += v._x;\n    this._y += v._y;\n    this._z += v._z;\n    return this;\n  }\n\n  multiply(t: number | Vec3): Vec3 {\n    if (isNumber(t)) {\n      this._x *= t;\n      this._y *= t;\n      this._z *= t;\n    } else {\n      this._x *= t.x;\n      this._y *= t.y;\n      this._z *= t.z;\n    }\n\n    return this;\n  }\n\n  length(): number {\n    return Math.sqrt(this.lengthSquared());\n  }\n\n  lengthSquared(): number {\n    return this._x * this._x + this._y * this._y + this._z * this._z;\n  }\n\n  log() {\n    console.log([this._x, this._y, this._z]);\n  }\n\n  static add(...vec: Vec3[]): Vec3 {\n    if (vec && vec.length) {\n      return vec.reduce((acc, cur) => {\n        return new Vec3(acc.x + cur.x, acc.y + cur.y, acc.z + cur.z);\n      });\n    }\n    return new Vec3();\n  }\n\n  static minus(...vec: Vec3[]): Vec3 {\n    if (vec && vec.length) {\n      return vec.reduce((acc, cur) => {\n        return new Vec3(acc.x - cur.x, acc.y - cur.y, acc.z - cur.z);\n      });\n    }\n    return new Vec3();\n  }\n\n  static multiply(u: Vec3, v: Vec3 | number): Vec3 {\n    if (isNumber(v)) {\n      return new Vec3(u.x * v, u.y * v, u.z * v);\n    }\n    return new Vec3(u.x * v.x, u.y * v.y, u.z * v.z);\n  }\n\n  static dot(u: Vec3, v: Vec3): number {\n    return u.x * v.x + u.y * v.y + u.z * v.z;\n  }\n\n  static cross(u: Vec3, v: Vec3): Vec3 {\n    return new Vec3(\n      u.y * v.z - u.z * v.y,\n      u.z * v.x - u.x * v.z,\n      u.x * v.y - u.y * v.x\n    );\n  }\n\n  static unit(u: Vec3): Vec3 {\n    return Vec3.multiply(u, 1 / u.length());\n  }\n\n  static random(min: number, max: number): Vec3 {\n    return new Vec3(\n      randomInRange(min, max),\n      randomInRange(min, max),\n      randomInRange(min, max)\n    );\n  }\n\n  static randomInUnitSphere(): Vec3 {\n    const a = randomInRange(0, 2 * Math.PI);\n    const z = randomInRange(-1, 1);\n    const r = Math.sqrt(1 - z * z);\n    return new Vec3(r * Math.cos(a), r * Math.sin(a), z);\n  }\n\n  /**\n   * 对randomInUnitSphere的一个小优化。取上半球面。\n   * @param normal 法向量\n   */\n  static randomInHemiSphere(normal: Vec3): Vec3 {\n    const v = Vec3.randomInUnitSphere();\n    if (Vec3.dot(normal, v) > 0) return v;\n    else return v.multiply(-1);\n  }\n\n  /**\n   * 单位圆\n   */\n  static randomInUnitDisk() {\n    while (true) {\n      const p = new Vec3(randomInRange(-1, 1), randomInRange(-1, 1), 0);\n      if (p.lengthSquared() >= 1) continue;\n      return p;\n    }\n  }\n}\n","import { Vec3 } from \"./vec\";\nimport { Point3 } from \"./vec/point3\";\nexport class Ray {\n  private _orig: Point3;\n  private _dir: Vec3;\n\n  get origin(): Point3 {\n    return this._orig;\n  }\n\n  get direction(): Vec3 {\n    return this._dir;\n  }\n\n  constructor(origin: Point3, direction: Vec3) {\n    this._orig = origin;\n    this._dir = direction;\n  }\n\n  at(t: number): Point3 {\n    return Vec3.add(this._orig, this._dir.multiply(t));\n  }\n}\n","export const PI = 3.1415926535897932385;\n\nexport function DegreeToRadians(degree: number) {\n  return (degree * PI) / 180.0;\n}\n\nexport function randomInRange(min: number, max: number) {\n  return min + Math.random() * max;\n}\n\nexport function random() {\n  return Math.random();\n}\n\nexport function clamp(x: number, min: number, max: number) {\n  if (x < min) return min;\n  if (x > max) return max;\n  return x;\n}\n","import { HitRecord } from \"./../hittable/hittable\";\nimport { Ray } from \"../ray\";\nimport { Color } from \"../vec/color\";\nimport { Vec3 } from \"../vec\";\n\nexport interface IScattered {\n  attenuation?: Color;\n  scattered?: Ray;\n  reflected: boolean;\n}\n\nexport interface IMaterial {\n  scatter(rIn: Ray, rec: HitRecord): IScattered;\n}\n\nexport abstract class Material implements IMaterial {\n  scatter(rIn: Ray, rec: HitRecord): IScattered {\n    return {\n      reflected: false,\n    };\n  }\n}\n\nexport function reflect(v: Vec3, n: Vec3): Vec3 {\n  const dot = Vec3.dot(v, n);\n  return Vec3.minus(v, Vec3.multiply(n, 2 * dot));\n}\n\n/**\n * Sec 10.2 斯涅尔定律求解折射光线\n * R' = R'⊥ + R'∥\n * @param uv\n * @param n 法线\n * @param etaiOverEtat  𝜂/𝜂' 两个介质的折射率\n */\nexport function refract(uv: Vec3, n: Vec3, etaiOverEtat: number) {\n  const cosTheta = Math.min(Vec3.dot(Vec3.multiply(uv, -1), n), 1.0);\n  const r_out_perp = Vec3.multiply(\n    Vec3.add(uv, Vec3.multiply(n, cosTheta)),\n    etaiOverEtat\n  );\n  const r_out_parallel = Vec3.multiply(\n    n,\n    -Math.sqrt(Math.abs(1 - r_out_perp.lengthSquared()))\n  );\n  return Vec3.add(r_out_perp, r_out_parallel);\n}\n","import { Vec3 } from \"./index\";\n\nexport class Point3 extends Vec3 {}\n","import { Point3 } from \"../vec/point3\";\nimport { Vec3 } from \"../vec\";\nimport { Ray } from \"../ray\";\nimport { Material, IMaterial } from \"../material\";\n\ninterface IHitRecord {\n  p: Point3;\n  normal: Vec3;\n  material: Material;\n  t: number;\n  fontFace: boolean;\n  setFaceNormal: (r: Ray, outwardNormal: Vec3) => void;\n}\n\nexport class HitRecord implements IHitRecord {\n  p: Point3;\n  normal: Vec3;\n  // @ts-ignore\n  material: Material;\n\n  t: number = 0;\n  fontFace: boolean = false;\n\n  constructor() {\n    this.p = new Point3();\n    this.normal = new Vec3();\n  }\n\n  setFaceNormal(r: Ray, outwardNormal: Vec3) {\n    this.fontFace = Vec3.dot(r.direction, outwardNormal) < 0;\n    this.normal = this.fontFace\n      ? outwardNormal\n      : Vec3.multiply(outwardNormal, -1);\n  }\n}\n\nexport abstract class Hittable {\n  abstract hit(r: Ray, t_min: number, t_max: number, rec: HitRecord): boolean;\n}\n","import { Vec3 } from \"./index\";\nimport { clamp } from \"../utils\";\n\nexport class Color extends Vec3 {}\n\n/**\n * 颜色计算\n * @param pixelColor 一个像素点多次采样后累计得到的颜色值\n * @param samplesPerPixel 采样次数\n */\nexport function genColor(pixelColor: Color, samplesPerPixel: number) {\n  let r = pixelColor.x;\n  let g = pixelColor.y;\n  let b = pixelColor.z;\n\n  // 采样平均\n  const scale = 1 / samplesPerPixel;\n  r = Math.sqrt(scale * r);\n  g = Math.sqrt(scale * g);\n  b = Math.sqrt(scale * b);\n\n  const ir = Math.floor(256 * clamp(r, 0.0, 0.999));\n  const ig = Math.floor(256 * clamp(g, 0.0, 0.999));\n  const ib = Math.floor(256 * clamp(b, 0.0, 0.999));\n  return `${ir} ${ig} ${ib}\\n`;\n}\n","import { Lambertian } from \"./material/lambertian\";\nimport { Metal } from \"./material/metal\";\nimport { Camera } from \"./camera\";\nimport { Point3 } from \"./vec/point3\";\nimport { Vec3 } from \"./vec\";\nimport { Color, genColor } from \"./vec/color\";\nimport { Ray } from \"./ray\";\nimport { Hittable, HitRecord } from \"./hittable/hittable\";\nimport { HittableList } from \"./hittable/hittables\";\nimport { Sphere } from \"./hittable\";\nimport { random } from \"./utils\";\nimport { Dielectric } from \"./material/dielectric\";\nimport { randomScene } from \"./hittable/random\";\nvar fs = require(\"fs\");\n\n// Image\n\nconst FILE_PATH = \"test.ppm\";\nconst IMG_WIDTH = 120;\nexport const ASPECT_RATIO = 3 / 2;\nconst IMG_HEIGHT = IMG_WIDTH / ASPECT_RATIO;\nconst SAMPLES_PER_PIXEL = 50;\nconst MAX_DEPTH = 50;\n\n// World\n\n// const R = Math.cos(Math.PI / 4);\n// const world = new HittableList();\nconst world = randomScene();\n\n// const material_left = new Lambertian(new Color(0, 0, 1));\n// const material_right = new Lambertian(new Color(1, 0, 0));\n// world.add(new Sphere(new Point3(-R, 0, -1), R, material_left));\n// world.add(new Sphere(new Point3(R, 0, -1), R, material_right));\n\n// const material_ground = new Lambertian(new Color(0.8, 0.8, 0.0));\n// const material_center = new Lambertian(new Color(0.1, 0.2, 0.5));\n// // const material_left = new Metal(new Color(0.8, 0.8, 0.8), 0.3);\n// const material_left = new Dielectric(1.5);\n// const material_right = new Metal(new Color(0.8, 0.6, 0.2), 0.0);\n\n// world.add(new Sphere(new Point3(0.0, -100.5, -1.0), 100.0, material_ground));\n// world.add(new Sphere(new Point3(0.0, 0.0, -1.0), 0.5, material_center));\n// world.add(new Sphere(new Point3(-1.0, 0.0, -1.0), 0.5, material_left));\n// // world.add(new Sphere(new Point3(-1.0, 0.0, -1.0), -0.45, material_left));\n// world.add(new Sphere(new Point3(1.0, 0.0, -1.0), 0.5, material_right));\n\n// Camera\nconst lookFrom = new Point3(13, 2, 3);\nconst lookAt = new Point3(0, 0, 0);\nconst vup = new Vec3(0, 1, 0);\nconst aperture = 0.1;\nconst distToFocus = 13.5;\n\nconst cam = new Camera(\n  lookFrom,\n  lookAt,\n  vup,\n  20,\n  ASPECT_RATIO,\n  aperture,\n  distToFocus\n);\n\n// Render\n\nlet imgStr = `P3\\n${IMG_WIDTH} ${IMG_HEIGHT}\\n255\\n`;\n\nfor (let j = IMG_HEIGHT - 1; j >= 0; j--) {\n  console.log(`\\rScanlines remaining: ${j} `);\n  for (let i = 0; i < IMG_WIDTH; i++) {\n    const pixel_color = new Color(0, 0, 0);\n    if (i === 200 && j === 200) {\n      debugger;\n    }\n    for (let s = 0; s < SAMPLES_PER_PIXEL; s++) {\n      const u = (i + random()) / (IMG_WIDTH - 1);\n      const v = (j + random()) / (IMG_HEIGHT - 1);\n      const r = cam.getRay(u, v);\n      pixel_color.add(rayColor(r, world, MAX_DEPTH));\n    }\n\n    const str = genColor(pixel_color, SAMPLES_PER_PIXEL);\n    imgStr += str;\n  }\n}\nconsole.log(`\\nDone\\n`);\n\nif (imgStr) {\n  fs.writeFile(FILE_PATH, imgStr, (err) => {\n    console.log(err);\n  });\n}\n\nfunction rayColor(r: Ray, world: Hittable, depth: number) {\n  const rec = new HitRecord();\n\n  // ray bounce limit, 防止递归调用太深，BOOM!\n  if (depth <= 0) {\n    return new Color(0, 0, 0);\n  }\n  if (world.hit(r, 0.001, Infinity, rec)) {\n    const { scattered, attenuation, reflected } = rec.material.scatter(r, rec);\n    if (reflected && scattered && attenuation) {\n      return Vec3.multiply(attenuation, rayColor(scattered, world, depth - 1));\n    }\n    const target = Vec3.add(\n      rec.p,\n      rec.normal,\n      // Vec3.randomInUnitSphere()\n      Vec3.randomInHemiSphere(rec.normal)\n    );\n    // ?\n    return Vec3.multiply(\n      rayColor(new Ray(rec.p, Vec3.minus(target, rec.p)), world, depth - 1),\n      0.5\n    );\n  }\n  const unitDirection: Vec3 = Vec3.unit(r.direction);\n  const t = 0.5 * (unitDirection.y + 1.0);\n  const white = new Color(1, 1, 1);\n  const color = new Color(0.5, 0.7, 1.0);\n  // 其实就是一个alpha混合\n  return white.multiply(1 - t).add(color.multiply(t));\n}\n","import { IScattered } from \"./index\";\nimport { Vec3 } from \"./../vec/index\";\nimport { HitRecord } from \"./../hittable/hittable\";\nimport { Ray } from \"./../ray\";\nimport { Material } from \".\";\nimport { Color } from \"../vec/color\";\n\nexport class Lambertian extends Material {\n  albedo: Color;\n\n  constructor(a: Color) {\n    super();\n    this.albedo = a;\n  }\n\n  scatter(rIn: Ray, rec: HitRecord): IScattered {\n    const scatterDirection = Vec3.add(rec.normal, Vec3.randomInUnitSphere());\n    const scattered = new Ray(rec.p, scatterDirection);\n    const attenuation = this.albedo;\n    const reflected = true;\n    return { scattered, attenuation, reflected };\n  }\n}\n","module.exports = require(\"util\");","import { Vec3 } from \"./../vec/index\";\nimport { HitRecord } from \"./../hittable/hittable\";\nimport { Ray } from \"./../ray\";\nimport { Material, IScattered, reflect } from \".\";\nimport { Color } from \"../vec/color\";\n\nexport class Metal extends Material {\n  albedo: Color;\n  fuzzy: number; // 软材质\n\n  constructor(a: Color, fuzzy: number = 1) {\n    super();\n    this.albedo = a;\n    this.fuzzy = fuzzy < 1 ? fuzzy : 1;\n  }\n\n  scatter(rIn: Ray, rec: HitRecord): IScattered {\n    const reflected = reflect(Vec3.unit(rIn.direction), rec.normal);\n    const scattered = new Ray(\n      rec.p,\n      Vec3.add(reflected, Vec3.multiply(Vec3.randomInUnitSphere(), this.fuzzy))\n    );\n    const attenuation = this.albedo;\n    const absorbed = Vec3.dot(scattered.direction, rec.normal) > 0;\n    return { scattered, attenuation, reflected: absorbed };\n  }\n}\n","import { Point3 } from \"./vec/point3\";\nimport { Vec3 } from \"./vec\";\nimport { Ray } from \"./ray\";\nimport { DegreeToRadians } from \"./utils\";\n\nexport class Camera {\n  origin: Point3;\n  lowerLeftCorner: Point3;\n  horizontal: Vec3;\n  vertical: Vec3;\n  u: Vec3;\n  v: Vec3;\n  w: Vec3;\n  lensRadius: number;\n\n  constructor(\n    lookFrom: Point3,\n    lookAt: Point3,\n    vup: Vec3,\n    vfov: number, // 垂直fov in degrees\n    aspectRatio: number,\n    aperture: number, // 光圈\n    focusDist: number\n  ) {\n    const theta = DegreeToRadians(vfov);\n    const h = Math.tan(theta / 2);\n    const viewport_height = h * 2;\n    const viewport_width = viewport_height * aspectRatio;\n\n    this.w = Vec3.unit(Vec3.minus(lookFrom, lookAt));\n    this.u = Vec3.unit(Vec3.cross(vup, this.w));\n    this.v = Vec3.cross(this.w, this.u);\n\n    this.origin = lookFrom;\n    this.horizontal = Vec3.multiply(this.u, viewport_width).multiply(focusDist);\n    this.vertical = Vec3.multiply(this.v, viewport_height).multiply(focusDist);\n    // 一连串平移操作，找到图像左下角在camera坐标系的坐标\n    this.lowerLeftCorner = Vec3.minus(\n      this.origin,\n      Vec3.multiply(this.horizontal, 0.5),\n      Vec3.multiply(this.vertical, 0.5),\n      Vec3.multiply(this.w, focusDist)\n    );\n    this.lensRadius = aperture / 2;\n  }\n\n  getRay(s: number, t: number): Ray {\n    const rd = Vec3.randomInUnitDisk().multiply(this.lensRadius);\n    const offset = Vec3.multiply(this.u, rd.x).add(Vec3.multiply(this.v, rd.y));\n    const direction = Vec3.add(\n      this.lowerLeftCorner,\n      Vec3.multiply(this.horizontal, s),\n      Vec3.multiply(this.vertical, t)\n    )\n      .minus(this.origin)\n      .minus(offset);\n    const origin = Vec3.add(this.origin, offset);\n    return new Ray(origin, direction);\n  }\n}\n","import { Hittable, HitRecord } from \"./hittable\";\nimport { Ray } from \"../ray\";\n\nexport class HittableList extends Hittable {\n  objects: Hittable[] = [];\n\n  constructor(object?: Hittable) {\n    super();\n    if (object) {\n      this.add(object);\n    }\n  }\n\n  clear() {\n    this.objects = [];\n  }\n  add(object: Hittable) {\n    this.objects.push(object);\n  }\n\n  hit(r: Ray, tMin: number, tMax: number, rec: HitRecord) {\n    let hitAny = false;\n    let closetSoFar = tMax;\n\n    for (const object of this.objects) {\n      if (object.hit(r, tMin, closetSoFar, rec)) {\n        hitAny = true;\n        closetSoFar = rec.t;\n      }\n    }\n\n    return hitAny;\n  }\n}\n","export { default as Sphere } from \"./sphere\";\n","import { Point3 } from \"./../vec/point3\";\nimport { Hittable, HitRecord } from \"./hittable\";\nimport { Ray } from \"../ray\";\nimport { Vec3 } from \"../vec\";\nimport { Material } from \"../material\";\n\nexport default class Sphere extends Hittable {\n  center: Point3;\n  radius: number;\n  material: Material;\n\n  constructor(cen: Point3, r: number, material: Material) {\n    super();\n    this.center = cen;\n    this.radius = r;\n    this.material = material;\n  }\n\n  hit(r: Ray, t_min: number, t_max: number, rec: HitRecord): boolean {\n    const oc: Vec3 = Vec3.minus(r.origin, this.center);\n    const a = r.direction.lengthSquared();\n    const halfB = Vec3.dot(oc, r.direction);\n    const c = oc.lengthSquared() - this.radius * this.radius;\n    const discriminant = halfB * halfB - a * c;\n\n    if (discriminant > 0) {\n      const root = Math.sqrt(discriminant);\n\n      let temp = (-halfB - root) / a;\n      if (temp < t_max && temp > t_min) {\n        rec.t = temp;\n        rec.p = r.at(rec.t);\n        const outwardNormal = Vec3.multiply(\n          Vec3.minus(rec.p, this.center),\n          1 / this.radius\n        );\n        rec.setFaceNormal(r, outwardNormal);\n        rec.material = this.material;\n        return true;\n      }\n\n      temp = (-halfB + root) / a;\n      if (temp < t_max && temp > t_min) {\n        rec.t = temp;\n        rec.p = r.at(rec.t);\n        const outwardNormal = Vec3.multiply(\n          Vec3.minus(rec.p, this.center),\n          1 / this.radius\n        );\n        rec.setFaceNormal(r, outwardNormal);\n        rec.material = this.material;\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n","import { IScattered, reflect, refract } from \"./index\";\nimport { Vec3 } from \"./../vec/index\";\nimport { HitRecord } from \"./../hittable/hittable\";\nimport { Ray } from \"./../ray\";\nimport { Material } from \".\";\nimport { Color } from \"../vec/color\";\n\nexport class Dielectric extends Material {\n  ir: number; // index of refraction\n\n  constructor(indexOfRefraction: number) {\n    super();\n    this.ir = indexOfRefraction;\n  }\n\n  scatter(rIn: Ray, rec: HitRecord): IScattered {\n    const attenuation = new Color(1.0, 1.0, 1.0);\n    const refractionRatio = rec.fontFace ? 1 / this.ir : this.ir;\n\n    const unitDirection = Vec3.unit(rIn.direction);\n\n    const cos_theta = Math.min(\n      Vec3.dot(Vec3.multiply(unitDirection, -1), rec.normal),\n      1.0\n    );\n    const sin_theta = Math.sqrt(1 - cos_theta * cos_theta);\n\n    const cannot_refract = refractionRatio * sin_theta > 1.0;\n    let direction: Vec3;\n    if (\n      cannot_refract ||\n      this.reflectance(cos_theta, refractionRatio) > Math.random()\n    ) {\n      direction = reflect(unitDirection, rec.normal);\n    } else {\n      direction = refract(unitDirection, rec.normal, refractionRatio);\n    }\n\n    const scattered = new Ray(rec.p, direction);\n    const reflected = true;\n    return { scattered, attenuation, reflected };\n  }\n\n  /**\n   * Schlick's approximation for reflectance.\n   * https://learnopengl-cn.github.io/07%20PBR/01%20Theory/\n   * 反射率随着角度变化而变化的\n   * @param cosine\n   * @param refIdx\n   */\n  private reflectance(cosine: number, refIdx: number): number {\n    let r0 = (1 - refIdx) / (1 + refIdx);\n    r0 = r0 * r0;\n    return r0 + (1 - r0) * Math.pow(1 - cosine, 5);\n  }\n}\n","module.exports = require(\"fs\");","import { Metal } from \"./../material/metal\";\nimport { Vec3 } from \"./../vec/index\";\nimport { Lambertian } from \"./../material/lambertian\";\nimport { HittableList } from \"./hittables\";\nimport { Color } from \"../vec/color\";\nimport { Sphere } from \".\";\nimport { Point3 } from \"../vec/point3\";\nimport { random, randomInRange } from \"../utils\";\nimport { Material } from \"../material\";\nimport { Dielectric } from \"../material/dielectric\";\nexport function randomScene(): HittableList {\n  const world = new HittableList();\n\n  const groundMaterial = new Lambertian(new Color(0.5, 0.5, 0.5));\n  world.add(new Sphere(new Point3(0, -2000, 0), 2000, groundMaterial));\n\n  for (let a = 3; a < 5; a++) {\n    for (let b = 3; b < 5; b++) {\n      const choose_mat = random();\n      const center = new Point3(a + 0.9 * random(), 0.2, b + 0.9 * random());\n\n      if (Vec3.minus(center, new Point3(4, 0.2, 0)).length() > 0.9) {\n        console.log(center);\n        let sphereMaterial: Material;\n\n        if (choose_mat < 0.8) {\n          // diffuse\n          const albedo = Vec3.random(0, 1).multiply(Vec3.random(0, 1));\n          sphereMaterial = new Lambertian(albedo);\n          world.add(new Sphere(center, 0.2, sphereMaterial));\n        } else if (choose_mat < 0.95) {\n          // metal\n          const albedo = Vec3.random(0.5, 1);\n          const fuzz = randomInRange(0, 0.5);\n          sphereMaterial = new Metal(albedo, fuzz);\n          world.add(new Sphere(center, 0.2, sphereMaterial));\n        } else {\n          // glass\n          sphereMaterial = new Dielectric(1.5);\n          world.add(new Sphere(center, 0.2, sphereMaterial));\n        }\n      }\n    }\n  }\n\n  const material1 = new Dielectric(1.5);\n  const material2 = new Lambertian(new Color(0.4, 0.2, 0.1));\n  const material3 = new Metal(new Color(0.7, 0.6, 0.5), 0.0);\n\n  //   world.add(new Sphere(new Point3(0, 1, 0), 1.0, material1));\n  //   world.add(new Sphere(new Point3(-4, 1, 0), 1.0, material2));\n  //   world.add(new Sphere(new Point3(6, 1, 0), 1.0, material2));\n\n  return world;\n}\n"],"sourceRoot":""}